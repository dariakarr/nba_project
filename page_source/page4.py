def app():
    import pandas as pd
    import streamlit as st
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.model_selection import cross_val_score
    from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
    import altair as alt

    st.header("4. –ü—Ä–æ–≥–Ω–æ–∑ –∏—Å—Ö–æ–¥–∞ –º–∞—Ç—á–∞ üìà")
    st.markdown(
        "–ú—ã –æ–±—É—á–∞–µ–º Random Forest –Ω–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è—Ö 'Four Factors' –∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ–±–µ–¥—É —Ö–æ–∑—è–µ–≤. "
        "–ü—Ä–∏–∑–Ω–∞–∫–∏ ‚Äî —ç—Ç–æ —Ä–∞–∑–Ω–∏—Ü–∞ (—Ö–æ–∑—è–µ–≤–∞ - –≥–æ—Å—Ç–∏) –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –º–µ—Ç—Ä–∏–∫–∞–º: Pace, eFG%, TOV%, ORB%, FT/FGA –∏ ORtg."
    )

    st.sidebar.header("–ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    st.sidebar.markdown("–î–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏—Å—Ö–æ–¥–∞ –º–∞—Ç—á–∞")
    max_depth = st.sidebar.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞:", 1, 20, 5)
    feature_opts = ["Pace", "eFG_Pct", "TOV_Pct", "ORB_Pct", "FT_per_FGA"]
    selected = st.sidebar.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:", feature_opts, default=feature_opts
    )
    n_estimators = st.sidebar.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤:", 10, 200, 100, 10)

    schedule = pd.read_csv("data/games_schedule.csv")
    ff = pd.read_csv("data/game_four_factors.csv")
    ff_home = ff.rename(columns={c: f"home_{c}" for c in feature_opts})
    ff_away = ff.rename(columns={c: f"away_{c}" for c in feature_opts})
    df = schedule.merge(
        ff_home[["Game_ID", "Team_ID"] + [f"home_{c}" for c in feature_opts]],
        left_on=["Game_ID", "Home_Team_ID"],
        right_on=["Game_ID", "Team_ID"],
    ).drop(columns=["Team_ID"])
    df = df.merge(
        ff_away[["Game_ID", "Team_ID"] + [f"away_{c}" for c in feature_opts]],
        left_on=["Game_ID", "Visitor_Team_ID"],
        right_on=["Game_ID", "Team_ID"],
    ).drop(columns=["Team_ID"])

    for feat in feature_opts:
        df[f"{feat}_diff"] = df[f"home_{feat}"] - df[f"away_{feat}"]
    feats = [f + "_diff" for f in selected]

    train_mask = df["Season_End_Year"] <= 2022
    X_train = df.loc[train_mask, feats]
    y_train = df.loc[train_mask, "Home_Win"]
    X_test = df.loc[~train_mask, feats]
    y_test = df.loc[~train_mask, "Home_Win"]

    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –≤ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ")
    train_counts = y_train.value_counts().reset_index()
    train_counts.columns = ["Home_Win", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
    dist_chart = (
        alt.Chart(train_counts)
        .mark_bar()
        .encode(
            x=alt.X("Home_Win:O", title="–ü–æ–±–µ–¥–∞ —Ö–æ–∑—è–µ–≤ (0 = –ø–æ—Ä–∞–∂–µ–Ω–∏–µ, 1 = –ø–æ–±–µ–¥–∞)"),
            y=alt.Y("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:Q", title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä"),
            color=alt.Color("Home_Win:O", legend=None),
        )
        .properties(width=300, height=200)
    )
    st.altair_chart(dist_chart)

    clf = RandomForestClassifier(
        n_estimators=int(n_estimators), max_depth=int(max_depth), random_state=42
    )
    clf.fit(X_train, y_train)
    y_train_pred = clf.predict(X_train)
    y_pred = clf.predict(X_test)
    train_acc = accuracy_score(y_train, y_train_pred)
    test_acc = accuracy_score(y_test, y_pred)
    cv_scores = cross_val_score(clf, X_train, y_train, cv=5)

    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏")
    st.write(f"Accuracy: **{train_acc:.2%}**")
    st.write(f"Accuracy (5-fold CV): {cv_scores.mean():.2%} ¬± {cv_scores.std():.2%}")
    st.write(f"Test accuracy (2023‚Äì24): **{test_acc:.2%}**")
    if train_acc - test_acc > 0.1:
        st.warning(
            "–ë–æ–ª—å—à–æ–π —Ä–∞–∑—Ä—ã–≤ –º–µ–∂–¥—É –æ–±—É—á–∞—é—â–µ–π –∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å max_depth –∏–ª–∏ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —á–∏—Å–ª–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤."
        )

    st.subheader("Confusion matrix (test)")
    cm = confusion_matrix(y_test, y_pred)
    cm_df = (
        pd.DataFrame(
            cm,
            index=["–§–∞–∫—Ç: –ü–æ—Ä–∞–∂–µ–Ω–∏–µ", "–§–∞–∫—Ç: –ü–æ–±–µ–¥–∞"],
            columns=["–ü—Ä–æ–≥–Ω–æ–∑: –ü–æ—Ä–∞–∂–µ–Ω–∏–µ", "–ü—Ä–æ–≥–Ω–æ–∑: –ü–æ–±–µ–¥–∞"],
        )
        .reset_index()
        .melt(id_vars="index")
    )
    cm_chart = (
        alt.Chart(cm_df)
        .mark_rect()
        .encode(x="variable:N", y="index:N", color="value:Q")
        .properties(width=300, height=200)
    )
    st.altair_chart(cm_chart)

    st.subheader("–û—Ç—á–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (test)")
    report = classification_report(y_test, y_pred, output_dict=True)
    rpt_df = pd.DataFrame(report).transpose()
    st.dataframe(rpt_df)

    st.subheader("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    imp = pd.DataFrame({"–ü—Ä–∏–∑–Ω–∞–∫": feats, "–í–∞–∂–Ω–æ—Å—Ç—å": clf.feature_importances_})
    imp = imp.sort_values("–í–∞–∂–Ω–æ—Å—Ç—å", ascending=False)
    imp_chart = (
        alt.Chart(imp)
        .mark_bar()
        .encode(x="–í–∞–∂–Ω–æ—Å—Ç—å:Q", y=alt.Y("–ü—Ä–∏–∑–Ω–∞–∫:N", sort="-x"))
        .properties(width=400, height=250)
    )
    st.altair_chart(imp_chart)

    st.subheader("–°–∏–º—É–ª—è—Ü–∏—è –º–∞—Ç—á–∞")
    season = st.selectbox("–°–µ–∑–æ–Ω:", sorted(df["Season_End_Year"].unique()))
    teams = sorted(df["Home_Team_ID"].unique())
    home = st.selectbox("–•–æ–∑—è–µ–≤–∞:", teams)
    away = st.selectbox("–ì–æ—Å—Ç–∏:", teams)
    if st.button("–°–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–±–µ–¥—É —Ö–æ–∑—è–µ–≤"):
        hist = df[df["Season_End_Year"] == season]
        home_avg = hist[hist["Home_Team_ID"] == home][
            [f"home_{f}" for f in feature_opts]
        ].mean()
        away_avg = hist[hist["Visitor_Team_ID"] == away][
            [f"away_{f}" for f in feature_opts]
        ].mean()
        diff = (home_avg.values - away_avg.values).reshape(1, -1)
        prob = clf.predict_proba(diff)[0][1]
        st.write(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã {home}: **{prob:.1%}**")

    st.markdown("---")
    st.subheader("–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    st.markdown("- Pace_diff: –≤–ª–∞–¥–µ–Ω–∏–π –∑–∞ –∏–≥—Ä—É (—Ö–æ–∑—è–µ–≤–∞ –º–∏–Ω—É—Å –≥–æ—Å—Ç–∏)")
    st.markdown("- eFG_Pct_diff: —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º % –ø–æ–ø–∞–¥–∞–Ω–∏–π")
    st.markdown("- TOV_Pct_diff: —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —á–∞—Å—Ç–æ—Ç–µ –ø–æ—Ç–µ—Ä—å")
    st.markdown("- ORB_Pct_diff: —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–µ –ø–æ–¥–±–æ—Ä–æ–≤ –≤ –Ω–∞–ø–∞–¥–µ–Ω–∏–∏")
    st.markdown("- FT_per_FGA_diff: —Ä–∞–∑–Ω–∏—Ü–∞ —à—Ç—Ä–∞—Ñ–Ω—ã—Ö –Ω–∞ –±—Ä–æ—Å–æ–∫ —Å –∏–≥—Ä—ã")
    st.markdown("- ORtg_diff: —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –∞—Ç–∞–∫—É—é—â–µ–º —Ä–µ–π—Ç–∏–Ω–≥–µ (–æ—á–∫–∏ –Ω–∞ 100 –≤–ª–∞–¥–µ–Ω–∏–π)")
